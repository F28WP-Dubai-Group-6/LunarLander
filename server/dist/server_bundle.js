require("source-map-support").install(),function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/server/dist/",r(r.s=1)}([function(e,t){e.exports=require("socket.io")},function(e,t,r){(function(e){const t=r(2),{default:n}=r(4),o=t();var i=r(3).createServer(o);o.use("/",t.static("client")),o.get("/",(t,r)=>{r.sendFile(e+"/index.html")}),i.listen(3e3,()=>{console.log("listening on *:3000")}),n(i)}).call(this,"/")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("http")},function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));const n="SERVER-TICK",o="SERVER-UPDATE-PLAYERS",i={req:"REQUEST-TERRAIN",ack:"REQUEST-TERRAIN-ACK"},s={req:"REQUEST-NEW-PLAYER",ack:"REQUEST-NEW-PLAYER-ACK"};class a{constructor({socket:e,position:t,rotation:r}){this.socket=e,this.position=t||{x:0,y:0},this.rotation=r||2*Math.PI}getSerialized(){return{id:this.socket.id,position:this.position,rotation:this.rotation}}}class c{constructor(){this.d0=Date.now(),this.players={},this.terrainSeed=Math.random(),setInterval(this.update.bind(this),1e3/60)}getPlayer(e){return this.players[e.id].getSerialized()}getPlayers(){return Object.values(this.players).map(e=>e.getSerialized())}addPlayer(e){this.players[e.id]=new a({socket:e,position:{x:100*Math.random(),y:100},rotation:void 0})}removePlayer(e){delete this.players[e.id]}update(){const e=this._tick()/1e3;Object.keys(this.players).forEach(t=>{this.players[t].socket.emit(n,e)})}_tick(){var e=Date.now(),t=e-this.d0;return this.d0=e,t}}var l=r(0),u=r.n(l);function d(e){const t=u()(e),r=new c;t.on("connection",e=>{console.log("User connected",e.id),e.on(i.req,()=>{e.emit(i.ack,r.terrainSeed)}),e.on(s.req,()=>{r.addPlayer(e),e.emit(s.ack,r.getPlayers()),e.broadcast.emit(o,r.getPlayers())}),e.on("disconnect",()=>{r.removePlayer(e),e.emit(o,r.getPlayers()),e.broadcast.emit(o,r.getPlayers()),console.log("User disconnected",e.id)})})}}]);
//# sourceMappingURL=server_bundle.js.map