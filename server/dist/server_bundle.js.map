{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"socket.io\"","webpack:///./server/server.js","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///./shared/Consts.js","webpack:///./server/src/Game/Physics/_Physics.js","webpack:///./server/src/Game/Physics/PhysicsTest.js","webpack:///./server/src/Game/Player.js","webpack:///./server/src/Game/Game.js","webpack:///./server/src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","express","default","main","app","http","createServer","use","static","req","res","sendFile","__dirname","listen","console","log","EVENTS","REQUEST","ack","DEFAULTS","BOOST","P_ROTATE","N_ROTATE","Physics","constructor","this","Error","calculateForce","calculateTorque","PhysicsTest","dt","x","y","Player","socket","position","rotation","Math","PI","mass","velocity","torque","force","physics","test","calcPosition","prevPosition","calcRotation","prevRotation","applyForce","isAlongNormal","f","sin","cos","applyTorque","calcVelocity","acc","calcPhysics","values","forEach","getSerialized","id","update","didPositionChange","didRotationChange","Game","d0","Date","now","players","terrainSeed","random","setInterval","getPlayers","map","v","addPlayer","undefined","removePlayer","movePlayer","type","_tick","player","emit","broadcast","io","IO","game","on","typeOfMovement"],"mappings":"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","file":"server_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/server/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"socket.io\");","// Library Imports.\nconst express = require('express');\nconst { default: main } = require('./src/main');\nconst app = express()\nvar http = require('http').createServer(app);\n\n// Serves client folder as a static resource at root url.\napp.use('/', express.static('client'))\n// Serves /client/index.html as entry point to the client.\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\n// Listens for http connections on port 3000.\nhttp.listen(3000, () => {\n    console.log('listening on *:3000');\n});\n\n// Socket.io entrypoint.\nmain(http)","module.exports = require(\"express\");","module.exports = require(\"http\");","// Used for Socket.io events where Server wnats to broadcast to all clinets \n// expecting no acknowledgement.\nexport const EVENTS = {\n    SERVER_TICK: 'SERVER-TICK',\n    SERVER_UPDATE_PLAYERS: 'SERVER-UPDATE-PLAYERS',\n    SERVER_UPDATE_PLAYER: 'SERVER-UPDATE-PLAYER',\n\n    PLAYER_HAS_MOVED: 'PLAYER-HAS-MOVED'\n}\n\n// Used for Socket.io events where ether Client or Server wants to request data\n// usually resolved by sending an acknowledgement.\nexport const REQUEST = {\n    REQUEST_TERRAIN: {\n        req: 'REQUEST-TERRAIN',\n        ack: 'REQUEST-TERRAIN-ACK'\n    },\n    REQUEST_NEW_PLAYER: {\n        req: 'REQUEST-NEW-PLAYER',\n        ack: 'REQUEST-NEW-PLAYER-ACK'\n    },\n    REQUEST_DELETE_PLAYER: {\n        req: 'REQUEST-DELETE-PLAYER',\n        ack: 'REQUEST-DELETE-PLAYER-ACK'\n    }\n}\n\n// Used to store Default values for various physics and other calculations\nexport const DEFAULTS = {\n    KEYMAP: {\n        'ArrowLeft': 'N_ROTATE',\n        'ArrowRight': 'P_ROTATE',\n        'Space': 'BOOST'\n    },\n    MOVEMENT_STRENGTH: {\n        BOOST: 0.5,\n        P_ROTATE: 0.1,\n        N_ROTATE: -0.1\n    }\n}","// Parent class of all physics classes\nexport default class Physics {\n    // Assert Abstract Class\n    constructor() {\n        if (this.constructor == Physics) {\n            throw new Error(\"Physics is an Abstract classes. Abstract classes can't be instantiated.\");\n        }\n    }\n\n    /**\n     * Calculates the force to apply.\n     */\n    calculateForce() {\n        throw new Error(\"Abstract Method has no implementation\");\n    }\n\n    /**\n     * Calculates the Torque to apply\n     */\n    calculateTorque() {\n        throw new Error(\"Abstract Method has no implementation\");\n    }\n\n}","import Physics from \"./_Physics\";\n\nexport default class PhysicsTest extends Physics{\n    calculateForce(dt) {\n        return {\n            x: 0,\n            y: 0\n        }\n    }\n\n    calculateTorque(dt) {\n        return 0\n    }\n}","import PhysicsTest from \"./Physics/PhysicsTest\"\n\n// Class representing a player.\nexport class Player {\n    constructor({socket, position, rotation}) {\n        // Socket associated with the player\n        this.socket = socket\n        // Players position vector in 2D space\n        this.position = position || {x: 0, y: 0}\n        // Players rotation in radians.\n        this.rotation = rotation || Math.PI * 2\n\n\n        // Mass of the player\n        this.mass = 1\n        // Current velocity applied to player\n        this.velocity = {x: 0, y: 0}\n        // Current torque applied to player\n        this.torque = 0\n        // Current force being applied\n        this.force = {x: 0, y: 0}\n        // List of active Physics bodies on the player.\n        this.physics = {\n            test: new PhysicsTest()\n        }\n    }\n\n    /**\n     * Calculate the Position of the Player\n     * @param {Number} dt \n     */\n    calcPosition(dt) {\n        const prevPosition = {...this.position}\n\n        this.position.x += this.velocity.x * dt * 1000;\n        this.position.y += this.velocity.y * dt * 1000;\n\n        return (this.position.x !== prevPosition.x) || (this.position.y !== prevPosition.y)\n    }\n\n    /**\n     * Calculate the rotatioon of the player\n     * @param {Number} dt \n     */\n    calcRotation(dt) {\n        const prevRotation = this.rotation\n        this.rotation += this.torque * dt\n\n        return this.rotation !== prevRotation\n    }\n\n    /**\n     * Apply a force to the player\n     * @param {Object} force \n     */\n    applyForce(force, isAlongNormal) {\n        const f = {\n            x: isAlongNormal ? force.x * -Math.sin(this.rotation): force.x, \n            y: isAlongNormal ? force.y * Math.cos(this.rotation): force.y\n        }\n        this.force.x += f.x\n        this.force.y += f.y\n    }\n\n    /**\n     * Apply a torque to the player\n     * @param {Number} rot \n     */\n    applyTorque(torque) {\n        return this.torque += torque\n    }\n\n     /**\n     * Calculate the velocity of the player\n     */\n    calcVelocity(dt) {\n        const acc = {\n            x: -this.force.x / this.mass,\n            y: -this.force.y / this.mass\n        }\n\n        this.velocity.x += acc.x * dt\n        this.velocity.y += acc.y * dt\n\n        this.force = {x: 0, y: 0}\n    }\n\n    calcPhysics(dt) {\n        Object.values(this.physics).forEach(p => {\n            const f = p.calculateForce(dt)\n            const t = p.calculateTorque(dt)\n            this.force.x += f.x\n            this.force.y += f.y\n            this.torque += t\n        })\n    }\n\n    /**\n     * Returns serialized form of Player.\n     * Easy to transmit over Socket.emit().\n     * @returns  Serialized form of Player.\n     */\n    getSerialized() {\n        return {\n            id: this.socket.id,\n            position: this.position,\n            rotation: this.rotation\n        }\n    }\n\n    /**\n     * Runs Every frame to perform physics calculations.\n     * @param {Number} dt \n     */\n    update(dt) {\n        this.calcPhysics(dt)\n        this.calcVelocity(dt)\n        const didPositionChange = this.calcPosition(dt)\n        const didRotationChange = this.calcRotation(dt)\n\n        return didPositionChange || didRotationChange\n    }\n}","// Interface imports\nimport { Socket } from 'socket.io';\n\n// Import Objects and Classes\nimport { DEFAULTS, EVENTS } from \"../../../shared/Consts\"\nimport { Player } from \"./Player\"\n\n// Class representing the Game.\nexport default class Game {\n    \n    constructor() {\n        // Used to calculate delta-time (dt, time between consecutive ticks)\n        this.d0 = Date.now()\n        // List of all the players in the game. {Socket.id: Socket}\n        this.players = {}\n        // Seed for terrain. Consistant across all clients.\n        this.terrainSeed = Math.random()\n        // Runs the update function every 1/60th of a second.\n        setInterval(this.update.bind(this), 1000/60);\n\n    }\n\n    /**\n     * @returns All players in the game.\n     */\n    getPlayers() {\n        return Object.values(this.players).map(v => v.getSerialized())\n    }\n\n    /**\n     * Adds a player to the game.\n     * @param {Socket} socket Socket of the player to add.\n     */\n    addPlayer(socket) {\n        this.players[socket.id] = new Player({\n            socket: socket,\n            position: {x: 500 * Math.random(), y: 100},\n            rotation: undefined\n        })\n    }\n\n    /**\n     * Removes a player to the game.\n     * @param {Socket} socket Socket of the player to remove.\n     */\n    removePlayer(socket) {\n        delete this.players[socket.id]\n    }\n\n    /**\n     * Function that moves the player in responce to Keybpard input\n     * @param {Socket} socket \n     * @param {String} type \n     */\n    movePlayer(socket, type) {\n        if(this.players[socket.id]) {\n            switch (type) {\n                case 'BOOST':\n                    this.players[socket.id].applyForce({\n                        x: DEFAULTS.MOVEMENT_STRENGTH.BOOST,\n                        y: DEFAULTS.MOVEMENT_STRENGTH.BOOST\n                    }, true)\n                    break;\n            \n                case 'P_ROTATE':\n                    this.players[socket.id].applyTorque(DEFAULTS.MOVEMENT_STRENGTH.P_ROTATE)\n                    break;\n\n                case 'N_ROTATE':\n                    this.players[socket.id].applyTorque(DEFAULTS.MOVEMENT_STRENGTH.N_ROTATE)\n                    break;\n\n                default:\n                    break;\n            }\n        }\n        \n    }\n\n\n\n    /**\n     * Update Function called every 1/60th of a second.\n     */\n    update() {\n        const dt = this._tick() / 1000\n\n        Object.values(this.players).forEach(player => {\n            player.socket.emit(EVENTS.SERVER_TICK, dt)\n\n            const doesPlayerUpdate = player.update(dt)\n            //Checks for player position changes and updates their position\n            if(doesPlayerUpdate){ \n                player.socket.emit(EVENTS.SERVER_UPDATE_PLAYER, player.getSerialized())\n                player.socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYER, player.getSerialized())\n            }\n\n        })\n    }\n\n    /**\n     * @private Used to calculate delta-time (dt, time between consecutive ticks)\n     */\n    _tick() {\n        var now = Date.now();\n        var dt = now - this.d0;\n        this.d0 = now;\n        return dt\n    }\n}","// Library Imports\nimport { EVENTS, REQUEST } from '../../shared/Consts';\nimport Game from './Game/Game';\nimport IO from 'socket.io';\n\n// Main\nexport default function main(http) {\n    // Create in instance of Socket.io\n    const io = IO(http)\n    // Creates an instance of the Game\n    const game = new Game()\n\n\n    // Listens for 'connection' event\n    io.on('connection', socket => {\n        console.log('User connected', socket.id)\n\n        // Listens for a request for terrain informaiton.\n        socket.on(REQUEST.REQUEST_TERRAIN.req, () => {\n            // Sends terrain seed as acknowledgement.\n            socket.emit(REQUEST.REQUEST_TERRAIN.ack, game.terrainSeed)\n        })\n\n        // Listens for a request to add player to the Game.\n        socket.on(REQUEST.REQUEST_NEW_PLAYER.req, () => {\n            // Adds current connected player to the game.\n            game.addPlayer(socket)\n            // Sends an acknowledgement with a list of all players in the game to the ender of the request.\n            socket.emit(REQUEST.REQUEST_NEW_PLAYER.ack, game.getPlayers())\n            // Sends a list of all players in the game to the rest of the players in the game.\n            socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n        })\n\n        // Listen for PLayer Moved events and tell game to move the player.\n        socket.on(EVENTS.PLAYER_HAS_MOVED, typeOfMovement => game.movePlayer(socket, typeOfMovement))\n\n        // Listens for 'disconnect' events.\n        socket.on('disconnect', () => {\n            // Removes disconected player from the game.\n            game.removePlayer(socket)\n             // Sends a list of all players in the game to the disconnected player. (Might be redundant)\n            socket.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n             // Sends a list of all players in the game to the rest of the players in the game.\n            socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n\n            console.log('User disconnected', socket.id)           \n        })\n    });\n}\n\n"],"sourceRoot":""}