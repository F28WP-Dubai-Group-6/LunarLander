{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"socket.io\"","webpack:///./server/server.js","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///./shared/Consts.js","webpack:///./server/src/Game/Player.js","webpack:///./server/src/Game/Game.js","webpack:///./server/src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","express","default","main","app","http","createServer","use","static","req","res","sendFile","__dirname","listen","console","log","EVENTS","REQUEST","ack","DEFAULTS","BOOST","P_ROTATE","N_ROTATE","Player","constructor","socket","position","rotation","this","x","y","Math","PI","mass","velocity","rotationalVelocity","force","calcPosition","dt","prevPosition","calcRotation","prevRotation","applyForce","sin","cos","applyTorque","rot","calcVelocity","acc","getSerialized","id","update","didPositionChange","didRotationChange","Game","d0","Date","now","players","terrainSeed","random","setInterval","getPlayers","values","map","v","addPlayer","undefined","removePlayer","movePlayer","type","_tick","forEach","player","mustUpdatePlayer","emit","broadcast","needsUpdate","io","IO","game","on","typeOfMovement"],"mappings":"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","file":"server_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/server/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"socket.io\");","// Library Imports.\nconst express = require('express');\nconst { default: main } = require('./src/main');\nconst app = express()\nvar http = require('http').createServer(app);\n\n// Serves client folder as a static resource at root url.\napp.use('/', express.static('client'))\n// Serves /client/index.html as entry point to the client.\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\n// Listens for http connections on port 3000.\nhttp.listen(3000, () => {\n    console.log('listening on *:3000');\n});\n\n// Socket.io entrypoint.\nmain(http)","module.exports = require(\"express\");","module.exports = require(\"http\");","// Used for Socket.io events where Server wnats to broadcast to all clinets \n// expecting no acknowledgement.\nexport const EVENTS = {\n    SERVER_TICK: 'SERVER-TICK',\n    SERVER_UPDATE_PLAYERS: 'SERVER-UPDATE-PLAYERS',\n    SERVER_UPDATE_PLAYER: 'SERVER-UPDATE-PLAYER',\n\n    PLAYER_HAS_MOVED: 'PLAYER-HAS-MOVED'\n}\n\n// Used for Socket.io events where ether Client or Server wants to request data\n// usually resolved by sending an acknowledgement.\nexport const REQUEST = {\n    REQUEST_TERRAIN: {\n        req: 'REQUEST-TERRAIN',\n        ack: 'REQUEST-TERRAIN-ACK'\n    },\n    REQUEST_NEW_PLAYER: {\n        req: 'REQUEST-NEW-PLAYER',\n        ack: 'REQUEST-NEW-PLAYER-ACK'\n    },\n    REQUEST_DELETE_PLAYER: {\n        req: 'REQUEST-DELETE-PLAYER',\n        ack: 'REQUEST-DELETE-PLAYER-ACK'\n    }\n}\n\n// Used to store Default values for various physics and other calculations\nexport const DEFAULTS = {\n    KEYMAP: {\n        'ArrowLeft': 'N_ROTATE',\n        'ArrowRight': 'P_ROTATE',\n        'Space': 'BOOST'\n    },\n    MOVEMENT_STRENGTH: {\n        BOOST: 0.5,\n        P_ROTATE: 0.1,\n        N_ROTATE: -0.1\n    }\n}","\n// Class representing a player.\nexport class Player {\n    constructor({socket, position, rotation}) {\n        // Socket associated with the player\n        this.socket = socket\n        // Players position vector in 2D space\n        this.position = position || {x: 0, y: 0}\n        // Players rotation in radians.\n        this.rotation = rotation || Math.PI * 2\n\n\n        // Mass of the player\n        this.mass = 1\n        // Velocity of the player\n        this.velocity = {x: 0, y: 0}\n        // Rotational Velocity of player\n        this.rotationalVelocity = 0\n        // Current force being applied\n        this.force = {x: 0, y: 0}\n    }\n\n    /**\n     * Calculate the Position of the Player\n     * @param {Number} dt \n     */\n    calcPosition(dt) {\n        const prevPosition = {...this.position}\n\n        this.position.x += this.velocity.x * dt * 100;\n        this.position.y += this.velocity.y * dt * 100;\n\n        return (this.position.x !== prevPosition.x) || (this.position.y !== prevPosition.y)\n    }\n\n    /**\n     * Calculate the rotatioon of the player\n     * @param {Number} dt \n     */\n    calcRotation(dt) {\n        const prevRotation = this.rotation\n        this.rotation += this.rotationalVelocity * dt\n        \n        return this.rotation !== prevRotation\n    }\n\n    /**\n     * Apply a force to the player\n     * @param {Object} force \n     */\n    applyForce(force) {\n        this.force = {\n            x: -force.x * -Math.sin(this.rotation), \n            y: -force.y * Math.cos(this.rotation)\n        }\n    }\n\n    /**\n     * Apply a torque to the player\n     * @param {Number} rot \n     */\n    applyTorque(rot) {\n        return this.rotationalVelocity += rot\n    }\n\n     /**\n     * Calculate the velocity of the player\n     */\n    calcVelocity() {\n        const acc = {\n            x: this.force.x / this.mass,\n            y: this.force.y / this.mass\n        }\n\n        this.velocity.x += acc.x \n        this.velocity.y += acc.y \n\n        this.force = {x: 0, y: 0}\n    }\n\n    /**\n     * Returns serialized form of Player.\n     * Easy to transmit over Socket.emit().\n     * @returns  Serialized form of Player.\n     */\n    getSerialized() {\n        return {\n            id: this.socket.id,\n            position: this.position,\n            rotation: this.rotation\n        }\n    }\n\n    /**\n     * Runs Every frame to perform physics calculations.\n     * @param {Number} dt \n     */\n    update(dt) {\n        this.calcVelocity(dt)\n        const didPositionChange = this.calcPosition(dt)\n        const didRotationChange = this.calcRotation(dt)\n\n        return didPositionChange || didRotationChange\n    }\n}","// Interface imports\nimport { Socket } from 'socket.io';\n\n// Import Objects and Classes\nimport { DEFAULTS, EVENTS } from \"../../../shared/Consts\"\nimport { Player } from \"./Player\"\n\n// Class representing the Game.\nexport default class Game {\n    \n    constructor() {\n        // Used to calculate delta-time (dt, time between consecutive ticks)\n        this.d0 = Date.now()\n        // List of all the players in the game. {Socket.id: Socket}\n        this.players = {}\n        // Seed for terrain. Consistant across all clients.\n        this.terrainSeed = Math.random()\n        // Runs the update function every 1/60th of a second.\n        setInterval(this.update.bind(this), 1000/60);\n\n    }\n\n    /**\n     * @returns All players in the game.\n     */\n    getPlayers() {\n        return Object.values(this.players).map(v => v.getSerialized())\n    }\n\n    /**\n     * Adds a player to the game.\n     * @param {Socket} socket Socket of the player to add.\n     */\n    addPlayer(socket) {\n        this.players[socket.id] = new Player({\n            socket: socket,\n            position: {x: 100 * Math.random(), y: 100},\n            rotation: undefined\n        })\n    }\n\n    /**\n     * Removes a player to the game.\n     * @param {Socket} socket Socket of the player to remove.\n     */\n    removePlayer(socket) {\n        delete this.players[socket.id]\n    }\n\n    /**\n     * Function that moves the player in responce to Keybpard input\n     * @param {Socket} socket \n     * @param {String} type \n     */\n    movePlayer(socket, type) {\n        if(this.players[socket.id]) {\n            switch (type) {\n                case 'BOOST':\n                    this.players[socket.id].applyForce({\n                        x: DEFAULTS.MOVEMENT_STRENGTH.BOOST,\n                        y: DEFAULTS.MOVEMENT_STRENGTH.BOOST\n                    })\n                    break;\n            \n                case 'P_ROTATE':\n                    this.players[socket.id].applyTorque(DEFAULTS.MOVEMENT_STRENGTH.P_ROTATE)\n                    break;\n\n                case 'N_ROTATE':\n                    this.players[socket.id].applyTorque(DEFAULTS.MOVEMENT_STRENGTH.N_ROTATE)\n                    break;\n\n                default:\n                    break;\n            }\n        }\n        \n    }\n\n    /**\n     * Update Function called every 1/60th of a second.\n     */\n    update() {\n        const dt = this._tick() / 1000\n        Object.values(this.players).forEach(player => {\n            const mustUpdatePlayer = player.update(dt)\n            player.socket.emit(EVENTS.SERVER_TICK, dt)\n            if(mustUpdatePlayer) {\n                player.socket.emit(EVENTS.SERVER_UPDATE_PLAYER, player.getSerialized())\n                player.socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYER, player.getSerialized())\n                player.needsUpdate = false\n            }\n            \n        })\n    }\n\n    /**\n     * @private Used to calculate delta-time (dt, time between consecutive ticks)\n     */\n    _tick() {\n        var now = Date.now();\n        var dt = now - this.d0;\n        this.d0 = now;\n        return dt\n    }\n}","// Library Imports\nimport { EVENTS, REQUEST } from '../../shared/Consts';\nimport Game from './Game/Game';\nimport IO from 'socket.io';\n\n// Main\nexport default function main(http) {\n    // Create in instance of Socket.io\n    const io = IO(http)\n    // Creates an instance of the Game\n    const game = new Game()\n\n\n    // Listens for 'connection' event\n    io.on('connection', socket => {\n        console.log('User connected', socket.id)\n\n        // Listens for a request for terrain informaiton.\n        socket.on(REQUEST.REQUEST_TERRAIN.req, () => {\n            // Sends terrain seed as acknowledgement.\n            socket.emit(REQUEST.REQUEST_TERRAIN.ack, game.terrainSeed)\n        })\n\n        // Listens for a request to add player to the Game.\n        socket.on(REQUEST.REQUEST_NEW_PLAYER.req, () => {\n            // Adds current connected player to the game.\n            game.addPlayer(socket)\n            // Sends an acknowledgement with a list of all players in the game to the ender of the request.\n            socket.emit(REQUEST.REQUEST_NEW_PLAYER.ack, game.getPlayers())\n            // Sends a list of all players in the game to the rest of the players in the game.\n            socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n        })\n\n        // Listen for PLayer Moved events and tell game to move the player.\n        socket.on(EVENTS.PLAYER_HAS_MOVED, typeOfMovement => game.movePlayer(socket, typeOfMovement))\n\n        // Listens for 'disconnect' events.\n        socket.on('disconnect', () => {\n            // Removes disconected player from the game.\n            game.removePlayer(socket)\n             // Sends a list of all players in the game to the disconnected player. (Might be redundant)\n            socket.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n             // Sends a list of all players in the game to the rest of the players in the game.\n            socket.broadcast.emit(EVENTS.SERVER_UPDATE_PLAYERS, game.getPlayers())\n\n            console.log('User disconnected', socket.id)           \n        })\n    });\n}\n\n"],"sourceRoot":""}